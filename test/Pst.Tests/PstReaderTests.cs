using NUnit.Framework;
using Pst.Internal;

namespace Pst.Tests
{
    [TestFixture]
    public class PstReaderTests
    {
        [Test]
        public void Validates_Header()
        {
            var input = TestHelper.GetTestDataStream("test.pst");
            var reader = new PstReader(input);
        }

        [Test]
        public void Finds_Block_By_Bid()
        {
            var blockData = new byte[]
            {
                0xe3, 0x36, 0xff, 0x93, 0x4c, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0xa6, 0x13, 0x6e, 0x41,
                0xaa, 0x41, 0x41, 0x41, 0xc8, 0xe8, 0x13, 0x36, 0x12, 0x41, 0x41, 0x41, 0xb1, 0xe8, 0x62, 0x41,
                0x41, 0x41, 0x41, 0x41, 0xfe, 0x5d, 0x13, 0x36, 0x26, 0x41, 0x41, 0x41, 0x36, 0x23, 0x88, 0x41,
                0xe2, 0x41, 0x41, 0x41, 0x5e, 0xc8, 0x13, 0x36, 0x12, 0x36, 0x41, 0x41, 0x67, 0xc1, 0x62, 0x41,
                0x3d, 0x41, 0x41, 0x41, 0x10, 0xc1, 0x13, 0x36, 0x58, 0x41, 0x41, 0x41, 0x0c, 0xc1, 0x13, 0x36,
                0x4c, 0x36, 0x41, 0x41, 0x19, 0xc1, 0x13, 0x36, 0x41, 0x36, 0x41, 0x41, 0xec, 0xc1, 0x13, 0x36,
                0xaa, 0x36, 0x41, 0x41, 0xae, 0xc1, 0x13, 0x36, 0x26, 0x36, 0x41, 0x41, 0x03, 0xc1, 0x13, 0x36,
                0xe2, 0x36, 0x41, 0x41, 0xa1, 0xc1, 0x13, 0x36, 0x10, 0x41, 0x41, 0x41, 0x8e, 0x77, 0x04, 0x41,
                0x36, 0x41, 0x41, 0x41, 0xba, 0x77, 0x62, 0x41, 0xf2, 0x41, 0xe8, 0x41, 0xb5, 0x77, 0x62, 0x41,
                0xdd, 0xb0, 0x13, 0x41, 0x3d, 0x53, 0x62, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99,
                0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0xa0, 0x41, 0x78, 0x41,
                0x82, 0x41, 0xfd, 0x41, 0x86, 0x41, 0x86, 0x41, 0x2c, 0x41, 0x4c, 0x41, 0x45, 0x41, 0x4a, 0x41,
                0x82, 0x41, 0x4a, 0x41, 0x4c, 0x41, 0x55, 0x41, 0x70, 0x41, 0xfd, 0x41, 0xea, 0x41, 0x36, 0x41,
                0x41, 0x41, 0xc7, 0x1d, 0x66, 0xc6, 0x8e, 0xef, 0xbf, 0x45, 0xd1, 0x39, 0x9d, 0x45, 0x1f, 0xbd,
                0xb9, 0x07, 0x36, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0x84, 0xe2, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0x56, 0xe2, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0x6b, 0xe2, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0xee, 0xe2, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0xed, 0xe2, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0x0c, 0xe2, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0x13, 0xe9, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0x51, 0x41, 0xf4, 0x41, 0x64, 0x41, 0x41, 0x41, 0x7f, 0x41, 0x74, 0x41, 0xc2, 0x41,
                0x79, 0x41, 0xd9, 0x41, 0x03, 0x41, 0xda, 0x41, 0x5e, 0x36, 0x8b, 0x36, 0x55, 0x36, 0x42, 0x36,
                0x57, 0x36, 0xbe, 0x36, 0xe3, 0x36
            };

            var input = TestHelper.GetTestDataStream("test.pst");
            var reader = new PstReader(input);

            var block = reader.ReadBlock(0x420L);

            Assert.IsNotNull(block);
            Assert.AreEqual(0x1c6, block.Length);
            Assert.AreEqual(0x8aa0, block.Signature);
            Assert.AreEqual(0xc8632127, block.Crc);
            CollectionAssert.AreEqual(blockData, block.Data);
        }

        [Test]
        public void Finds_Block_By_Nid()
        {
            var blockData = new byte[]
            {
                0xe3, 0x36, 0xff, 0x93, 0x4c, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0xa6, 0x13, 0x6e, 0x41,
                0xaa, 0x41, 0x41, 0x41, 0xc8, 0xe8, 0x13, 0x36, 0x12, 0x41, 0x41, 0x41, 0xb1, 0xe8, 0x62, 0x41,
                0x41, 0x41, 0x41, 0x41, 0xfe, 0x5d, 0x13, 0x36, 0x26, 0x41, 0x41, 0x41, 0x36, 0x23, 0x88, 0x41,
                0xe2, 0x41, 0x41, 0x41, 0x5e, 0xc8, 0x13, 0x36, 0x12, 0x36, 0x41, 0x41, 0x67, 0xc1, 0x62, 0x41,
                0x3d, 0x41, 0x41, 0x41, 0x10, 0xc1, 0x13, 0x36, 0x58, 0x41, 0x41, 0x41, 0x0c, 0xc1, 0x13, 0x36,
                0x4c, 0x36, 0x41, 0x41, 0x19, 0xc1, 0x13, 0x36, 0x41, 0x36, 0x41, 0x41, 0xec, 0xc1, 0x13, 0x36,
                0xaa, 0x36, 0x41, 0x41, 0xae, 0xc1, 0x13, 0x36, 0x26, 0x36, 0x41, 0x41, 0x03, 0xc1, 0x13, 0x36,
                0xe2, 0x36, 0x41, 0x41, 0xa1, 0xc1, 0x13, 0x36, 0x10, 0x41, 0x41, 0x41, 0x8e, 0x77, 0x04, 0x41,
                0x36, 0x41, 0x41, 0x41, 0xba, 0x77, 0x62, 0x41, 0xf2, 0x41, 0xe8, 0x41, 0xb5, 0x77, 0x62, 0x41,
                0xdd, 0xb0, 0x13, 0x41, 0x3d, 0x53, 0x62, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99,
                0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0xa0, 0x41, 0x78, 0x41,
                0x82, 0x41, 0xfd, 0x41, 0x86, 0x41, 0x86, 0x41, 0x2c, 0x41, 0x4c, 0x41, 0x45, 0x41, 0x4a, 0x41,
                0x82, 0x41, 0x4a, 0x41, 0x4c, 0x41, 0x55, 0x41, 0x70, 0x41, 0xfd, 0x41, 0xea, 0x41, 0x36, 0x41,
                0x41, 0x41, 0xc7, 0x1d, 0x66, 0xc6, 0x8e, 0xef, 0xbf, 0x45, 0xd1, 0x39, 0x9d, 0x45, 0x1f, 0xbd,
                0xb9, 0x07, 0x36, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0x84, 0xe2, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0x56, 0xe2, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0x6b, 0xe2, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0xee, 0xe2, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0xed, 0xe2, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0x0c, 0xe2, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed,
                0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5, 0x48, 0xba, 0x13, 0xe9, 0x41, 0x41, 0x41, 0x41,
                0x41, 0x41, 0x32, 0xb4, 0x7c, 0x99, 0x18, 0xed, 0x27, 0x51, 0x92, 0x1e, 0xab, 0x95, 0x7b, 0xd5,
                0x48, 0xba, 0x51, 0x41, 0xf4, 0x41, 0x64, 0x41, 0x41, 0x41, 0x7f, 0x41, 0x74, 0x41, 0xc2, 0x41,
                0x79, 0x41, 0xd9, 0x41, 0x03, 0x41, 0xda, 0x41, 0x5e, 0x36, 0x8b, 0x36, 0x55, 0x36, 0x42, 0x36,
                0x57, 0x36, 0xbe, 0x36, 0xe3, 0x36
            };

            var input = TestHelper.GetTestDataStream("test.pst");
            var reader = new PstReader(input);

            var block = reader.ReadBlock(0x21);

            Assert.IsNotNull(block);
            Assert.AreEqual(0x1c6, block.Length);
            Assert.AreEqual(0x8aa0, block.Signature);
            Assert.AreEqual(0xc8632127, block.Crc);
            CollectionAssert.AreEqual(blockData, block.Data);
        }
    }
}
