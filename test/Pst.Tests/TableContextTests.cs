using Moq;
using NUnit.Framework;
using Pst.Internal;
using Pst.Internal.Ltp;
using Pst.Internal.Ndb;

namespace Pst.Tests
{
    [TestFixture]
    public class TableContextTests
    {
        #region Test Data
        private static byte[] _nodeData = new byte[]
        {
            0x62, 0x03, 0xec, 0x7c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb5, 0x04, 0x04, 0x00,
            0x60, 0x00, 0x00, 0x00, 0x7c, 0x19, 0x64, 0x00, 0x64, 0x00, 0x66, 0x00, 0x6a, 0x00, 0x20, 0x00,
            0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x30, 0x0e, 0x14, 0x00,
            0x04, 0x06, 0x14, 0x00, 0x33, 0x0e, 0x18, 0x00, 0x08, 0x07, 0x02, 0x01, 0x34, 0x0e, 0x20, 0x00,
            0x04, 0x08, 0x03, 0x00, 0x38, 0x0e, 0x24, 0x00, 0x04, 0x09, 0x0b, 0x00, 0xf4, 0x10, 0x65, 0x00,
            0x01, 0x0f, 0x1f, 0x00, 0x01, 0x30, 0x08, 0x00, 0x04, 0x02, 0x02, 0x01, 0x20, 0x30, 0x34, 0x00,
            0x04, 0x0d, 0x02, 0x01, 0x21, 0x30, 0x60, 0x00, 0x04, 0x18, 0x03, 0x00, 0x02, 0x36, 0x0c, 0x00,
            0x04, 0x03, 0x03, 0x00, 0x03, 0x36, 0x10, 0x00, 0x04, 0x04, 0x0b, 0x00, 0x0a, 0x36, 0x64, 0x00,
            0x01, 0x05, 0x1f, 0x00, 0x13, 0x36, 0x28, 0x00, 0x04, 0x0a, 0x02, 0x01, 0xda, 0x36, 0x3c, 0x00,
            0x04, 0x10, 0x03, 0x00, 0xde, 0x36, 0x40, 0x00, 0x04, 0x11, 0x03, 0x00, 0x35, 0x66, 0x2c, 0x00,
            0x04, 0x0b, 0x03, 0x00, 0x36, 0x66, 0x30, 0x00, 0x04, 0x0c, 0x02, 0x01, 0x70, 0x66, 0x38, 0x00,
            0x04, 0x0e, 0x03, 0x00, 0x2d, 0x67, 0x44, 0x00, 0x04, 0x12, 0x14, 0x00, 0x30, 0x67, 0x50, 0x00,
            0x08, 0x15, 0x03, 0x00, 0x31, 0x67, 0x4c, 0x00, 0x04, 0x14, 0x1f, 0x00, 0x32, 0x67, 0x58, 0x00,
            0x04, 0x16, 0x1f, 0x00, 0x33, 0x67, 0x5c, 0x00, 0x04, 0x17, 0x03, 0x00, 0xf2, 0x67, 0x00, 0x00,
            0x04, 0x00, 0x03, 0x00, 0xf3, 0x67, 0x04, 0x00, 0x04, 0x01, 0x03, 0x00, 0x53, 0x68, 0x48, 0x00,
            0x04, 0x13, 0x62, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x80, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0xa2, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc2, 0x80, 0x00, 0x00, 0x03, 0x00,
            0x00, 0x00, 0x22, 0x81, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x42, 0x81, 0x00, 0x00, 0x05, 0x00,
            0x00, 0x00, 0x62, 0x81, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x82, 0x81, 0x00, 0x00, 0x07, 0x00,
            0x00, 0x00, 0xa2, 0x81, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xc2, 0x81, 0x00, 0x00, 0x09, 0x00,
            0x00, 0x00, 0xe2, 0x81, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x82, 0x00, 0x00, 0x0b, 0x00,
            0x00, 0x00, 0x22, 0x82, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x06, 0x04, 0x03, 0x00, 0x00, 0x00,
            0x07, 0x04, 0x04, 0x00, 0x00, 0x00, 0x44, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x74, 0x00,
            0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x73, 0x00,
            0x49, 0x00, 0x6e, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x4f, 0x00, 0x75, 0x00, 0x74, 0x00,
            0x62, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x20, 0x00,
            0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x73, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6c, 0x00,
            0x65, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x61, 0x00, 0x72, 0x00, 0x49, 0x00, 0x50, 0x00, 0x46, 0x00,
            0x2e, 0x00, 0x41, 0x00, 0x70, 0x00, 0x70, 0x00, 0x6f, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x6d, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00,
            0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x73, 0x00, 0x49, 0x00, 0x50, 0x00, 0x46, 0x00, 0x2e, 0x00,
            0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x4a, 0x00,
            0x6f, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x49, 0x00, 0x50, 0x00,
            0x46, 0x00, 0x2e, 0x00, 0x4a, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6e, 0x00, 0x61, 0x00,
            0x6c, 0x00, 0x4e, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x49, 0x00, 0x50, 0x00,
            0x46, 0x00, 0x2e, 0x00, 0x53, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x79, 0x00,
            0x4e, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x54, 0x00, 0x61, 0x00, 0x73, 0x00, 0x6b, 0x00,
            0x73, 0x00, 0x49, 0x00, 0x50, 0x00, 0x46, 0x00, 0x2e, 0x00, 0x54, 0x00, 0x61, 0x00, 0x73, 0x00,
            0x6b, 0x00, 0x44, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x73, 0x00, 0x49, 0x00,
            0x50, 0x00, 0x46, 0x00, 0x2e, 0x00, 0x4e, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x52, 0x00,
            0x53, 0x00, 0x53, 0x00, 0x20, 0x00, 0x46, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x73, 0x00,
            0x49, 0x00, 0x50, 0x00, 0x46, 0x00, 0x2e, 0x00, 0x4e, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x2e, 0x00, 0x4f, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x6f, 0x00, 0x6b, 0x00,
            0x48, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x70, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00,
            0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x61, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x41, 0x00, 0x63, 0x00, 0x74, 0x00,
            0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00,
            0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x73, 0x00, 0x49, 0x00, 0x50, 0x00, 0x46, 0x00, 0x2e, 0x00,
            0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x66, 0x00, 0x69, 0x00, 0x67, 0x00, 0x75, 0x00, 0x72, 0x00,
            0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x51, 0x00, 0x75, 0x00, 0x69, 0x00,
            0x63, 0x00, 0x6b, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x65, 0x00, 0x70, 0x00, 0x20, 0x00,
            0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x73, 0x00,
            0x49, 0x00, 0x50, 0x00, 0x46, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x66, 0x00,
            0x69, 0x00, 0x67, 0x00, 0x75, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00,
            0x6e, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x00, 0xf2, 0x00, 0x5a, 0x01, 0x66, 0x01,
            0x80, 0x01, 0x8a, 0x01, 0x96, 0x01, 0xaa, 0x01, 0xba, 0x01, 0xd8, 0x01, 0xe8, 0x01, 0xfe, 0x01,
            0x0c, 0x02, 0x22, 0x02, 0x2c, 0x02, 0x48, 0x02, 0x52, 0x02, 0x62, 0x02, 0x6e, 0x02, 0x7e, 0x02,
            0x90, 0x02, 0xc0, 0x02, 0xf8, 0x02, 0x1a, 0x03, 0x40, 0x03, 0x62, 0x03, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x9c, 0x03, 0xb9, 0x39, 0x19, 0x99, 0x48, 0x34, 0x38, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        private static byte[] _subNodeTree = new byte[]
        {
            0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x00, 0x82, 0x4e, 0x33, 0x4c, 0xb0, 0x03, 0x42, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        private static byte[] _subNodeData = new byte[]
        {
            0x62, 0x80, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x82, 0x80, 0x00, 0x00, 0x58, 0x00,
            0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xfc, 0x00, 0x80, 0x00, 0xa2, 0x80, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xc2, 0x80,
            0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x22, 0x81, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
            0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x20,
            0x00, 0x00, 0x42, 0x81, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x20, 0x00, 0x00, 0x62, 0x81, 0x00, 0x00,
            0x2d, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfc, 0x20, 0x00, 0x00, 0x82, 0x81, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xe0, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x20, 0x00, 0x00,
            0xa2, 0x81, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x20, 0x00, 0x00, 0xc2, 0x81, 0x00, 0x00, 0x36, 0x00,
            0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xfc, 0x20, 0x00, 0x00, 0xe2, 0x81, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x20, 0x00, 0x00, 0x02, 0x82,
            0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0xfc, 0x21, 0x00, 0x00, 0x22, 0x82, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
            0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x21,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x62, 0x05, 0x7d, 0x45, 0x0d, 0x8a, 0x55, 0x72, 0x3c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        #endregion

        private static object[] CellDataCases =
        {
            new object[] { 0, PropertyKey.LtpRowId, new byte[] { 0x62, 0x80, 0x00, 0x00 } },
            new object[] { 0, PropertyKey.LtpRowVer, new byte[] { 0x0e, 0x00, 0x00, 0x00 } },
            new object[] { 0, PropertyKey.DisplayName, new byte[] { 0x44, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x73, 0x00 } },
            new object[] { 0, PropertyKey.Hidden, null },
            new object[] { 1, PropertyKey.LtpRowId, new byte[] { 0x82, 0x80, 0x00, 0x00 } },
            new object[] { 1, PropertyKey.LtpRowVer, new byte[] { 0x58, 0x00, 0x00, 0x00 } },
            new object[] { 1, PropertyKey.DisplayName, new byte[] { 0x49, 0x00, 0x6e, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x78, 0x00 } }
        };

        [Test, TestCaseSource("CellDataCases")]
        public void Gets_Cell_Data(int rowIndex, PropertyKey key, byte[] expectedBytes)
        {
            var reader = new Mock<IPstReader>();
            reader.Setup(r => r.FindBlock(0x538))
                .Returns(Block.Create(_nodeData));
            reader.Setup(r => r.FindBlock(0x542))
                .Returns(Block.Create(_subNodeTree));
            reader.Setup(r => r.FindBlock(0x53c))
                .Returns(Block.Create(_subNodeData));

            var node = new Node(0x802d, 0x538, 0x542, reader.Object);
            var tc = new TableContext(node, reader.Object);

            var row = tc.Rows[rowIndex];
            CollectionAssert.AreEqual(expectedBytes, row.GetCell(key)?.ToArray());
        }
    }
}
